stages:
  - test
  - deploy
  - release

include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml

.poetry-base:
  image: musicscience37/sphinx-doxygen
  variables:
    POETRY_PYTHON_VERSION: "3.12"
    POETRY_CACHE_DIR: ${CI_PROJECT_DIR}/.poetry-cache
  before_script:
    - poetry config virtualenvs.in-project true
    - poetry env use ${POETRY_PYTHON_VERSION}
    - poetry install --sync
  cache:
    key:
      prefix: poetry-linux-${POETRY_PYTHON_VERSION}
      files:
        - poetry.lock
    paths:
      - .poetry-cache

pre-commit:
  extends: .poetry-base
  stage: test
  needs: []
  script:
    - poetry run pre-commit run --all-files

spell check:
  stage: test
  needs: []
  image: node
  script:
    - npm install -g cspell
    - cspell lint
      "**/*.py"
      "**/*.txt"
      "**/*.md"
      "**/*.rst"
      "**/*.bib"
      "**/*.yaml"
      "**/*.yml"
      "**/*.json"
      "**/*.toml"
      "**/*.sh"
      "**/*.bash"
      "**/*.css"
  interruptible: true

build docs:
  extends: .poetry-base
  stage: test
  needs: []
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
      variables:
        PROJECT_VERSION: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
      variables:
        PROJECT_VERSION: $CI_COMMIT_SHORT_SHA
  parallel:
    matrix:
      - POETRY_PYTHON_VERSION:
          - "3.10"
          - "3.11"
          - "3.12"
  script:
    - bash ./docs/cpp_example/generate_doxygen_xml.sh
    - poetry run sphinx-build -b html -W -q -D release=$PROJECT_VERSION
      docs/source docs/build
  artifacts:
    paths:
      - "docs/build"
    expire_in: "1 week"

pages:
  stage: deploy
  image: alpine
  needs: ["build docs: [3.12]"]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - mv docs/build public
  artifacts:
    paths:
      - public

publish-package:
  extends: .poetry-base
  needs:
    - "build docs: [3.10]"
    - "build docs: [3.11]"
    - "build docs: [3.12]"
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - poetry build
    - poetry config pypi-token.pypi ${PYPI_TOKEN}
    - poetry publish

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  needs: [publish-package]
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - echo "This is a release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "$CI_COMMIT_TAG"
    description: "./docs/source/change-log/${CI_COMMIT_TAG}.md"
